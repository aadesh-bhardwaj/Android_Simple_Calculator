pipeline:
  name: SimpleCalc
  identifier: SimpleCalc
  projectIdentifier: default_project
  orgIdentifier: default
  properties:
    ci:
      codebase:
        connectorRef: SimpleCalc
        build: <+input>
        sparseCheckout: []
  stages:
    - stage:
        name: Build_Android
        identifier: Build_Android
        type: CI
        spec:
          cloneCodebase: true
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: test101
              namespace: imported
              automountServiceAccountToken: true
              nodeSelector: {}
              os: Linux
          execution:
            steps:
              - step:
                  type: Run
                  name: Build APK
                  identifier: Build_APK
                  spec:
                    connectorRef: stupido_saurus
                    image: stupidosaurus/android-sdk-gradle:latest
                    shell: Sh
                    envVariables:
                      GRADLE_USER_HOME: /harness/gradle
                    command: |-
                      set -eux
                      echo ">>> Building and Testing Android App..."
                      cd Calculator
                      chmod +x gradlew
                      ./gradlew --version
                      ./gradlew clean assembleDebug
                      ls -al app/build/outputs/apk/debug/
                    resources:
                      limits:
                        memory: 4Gi
                        cpu: "2"
              - step:
                  type: RunTests
                  name: Run Unit Tests
                  identifier: JUnit_Reports
                  spec:
                    connectorRef: stupido_saurus
                    image: stupidosaurus/android-sdk-gradle:latest
                    language: Java
                    buildTool: Gradle
                    args: testDebugUnitTest
                    runOnlySelectedTests: false
                    preCommand: cd Calculator
                    resources:
                      limits:
                        memory: 4Gi
                        cpu: "2"
                    reports:
                      type: JUnit
                      spec:
                        paths:
                          - Calculator/app/build/test-results/testDebugUnitTest/*.xml
                    enableTestSplitting: false
              - step:
                  type: GCSUpload
                  name: GCSUpload_1
                  identifier: GCSUpload_1
                  spec:
                    connectorRef: GCS_Connector
                    bucket: atmosly-tfstate-atmosly-439606
                    sourcePath: Calculator/app/build/outputs/apk/debug/*.apk
                    target: harness/test/<+pipeline.sequenceId>
          caching:
            enabled: true
            paths:
              - /harness/gradle/caches
              - /harness/gradle/wrapper
          buildIntelligence:
            enabled: true
        description: ""
    - stage:
        identifier: Distribute_Android
        type: CI
        name: Distribute_Android
        spec:
          cloneCodebase: false
          infrastructure:
            useFromStage: Build_Android
          execution:
            steps:
              - step:
                  identifier: Download_APK
                  type: Run
                  name: Download APK from GCS
                  spec:
                    connectorRef: stupido_saurus
                    image: google/cloud-sdk:slim
                    shell: Sh
                    envVariables:
                      GCP_SA_FILE: <+secrets.getValue("account.gcp_service_account_key")>
                    command: |-
                      set -euo pipefail
                      if [ ! -f "${GCP_SA_FILE}" ]; then
                        echo "GCP_SA_FILE is not a file path. Ensure it's a FILE secret."; exit 1
                      fi

                      gcloud auth activate-service-account --key-file="${GCP_SA_FILE}"
                      # Optional: show active account (doesn't leak secrets)
                      gcloud auth list

                      # Download the APK produced in the build stage of THIS pipeline run
                      gsutil -m cp \
                        "gs://atmosly-tfstate-atmosly-439606/harness/test/<+pipeline.sequenceId>/*.apk" \
                        ./

                      # Pick newest APK (robust for any file name)
                      APK="$(ls -t ./*.apk | head -1 || true)"
                      if [ -z "${APK}" ] || [ ! -f "${APK}" ]; then
                        echo "No APK found in download location"; exit 1
                      fi
                      echo "Using APK: ${APK}"
                      ls -lh "${APK}"
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: Abort
              - step:
                  identifier: Firebase_Distribute
                  type: Run
                  name: Distribute to Firebase
                  spec:
                    connectorRef: stupido_saurus
                    image: node:18-alpine
                    shell: Sh
                    envVariables:
                      GOOGLE_APPLICATION_CREDENTIALS: <+secrets.getValue("FirebaseKey")>
                      FIREBASE_APP_ID: <+secrets.getValue("firebase_app_id")>
                      FIREBASE_GROUPS: <+secrets.getValue("firebase_groups")>
                      FIREBASE_TESTERS: <+secrets.getValue("firebase_testers")>
                    command: |-
                      set -euo pipefail

                      # Ensure APK from previous step exists (shared workspace/PVC)
                      APK="$(ls -t ./*.apk | head -1 || true)"
                      if [ -z "${APK}" ] || [ ! -f "${APK}" ]; then
                        echo "APK not found in workspace; ensure previous step downloaded it."; exit 1
                      fi

                      npm i -g firebase-tools

                      # Prefer groups; fall back to testers
                      if [ -n "${FIREBASE_GROUPS:-}" ]; then
                        firebase appdistribution:distribute "${APK}" \
                          --app "${FIREBASE_APP_ID}" \
                          --groups "${FIREBASE_GROUPS}" \
                          --release-notes "CI build <+pipeline.sequenceId> on <+codebase.branch>"
                      elif [ -n "${FIREBASE_TESTERS:-}" ]; then
                        firebase appdistribution:distribute "${APK}" \
                          --app "${FIREBASE_APP_ID}" \
                          --testers "${FIREBASE_TESTERS}" \
                          --release-notes "CI build <+pipeline.sequenceId> on <+codebase.branch>"
                      else
                        echo "Neither FIREBASE_GROUPS nor FIREBASE_TESTERS provided. Set one as a secret."; exit 1
                      fi
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: Abort
