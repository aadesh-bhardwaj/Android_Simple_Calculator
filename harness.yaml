pipeline:
  name: SimpleCalc
  identifier: SimpleCalc
  projectIdentifier: default_project
  orgIdentifier: default
  properties:
    ci:
      codebase:
        connectorRef: SimpleCalc
        build: <+input>
        sparseCheckout: []
  stages:
    - stage:
        name: Build_Android
        identifier: Build_Android
        type: CI
        spec:
          cloneCodebase: true
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: test101
              namespace: imported
              automountServiceAccountToken: true
              nodeSelector: {}
              os: Linux
          execution:
            steps:
              - step:
                  type: Run
                  name: Build APK
                  identifier: Build_APK
                  spec:
                    connectorRef: stupido_saurus
                    image: stupidosaurus/android-sdk-gradle:latest
                    shell: Sh
                    envVariables:
                      GRADLE_USER_HOME: /harness/gradle
                    command: |-
                      set -eux
                      echo ">>> Building and Testing Android App..."
                      cd Calculator
                      chmod +x gradlew
                      ./gradlew --version
                      ./gradlew clean assembleDebug
                      ls -al app/build/outputs/apk/debug/
                    resources:
                      limits:
                        memory: 4Gi
                        cpu: "2"
              - step:
                  type: RunTests
                  name: Run Unit Tests
                  identifier: JUnit_Reports
                  spec:
                    connectorRef: stupido_saurus
                    image: stupidosaurus/android-sdk-gradle:latest
                    language: Java
                    buildTool: Gradle
                    args: testDebugUnitTest
                    runOnlySelectedTests: false
                    preCommand: cd Calculator
                    resources:
                      limits:
                        memory: 4Gi
                        cpu: "2"
                    reports:
                      type: JUnit
                      spec:
                        paths:
                          - Calculator/app/build/test-results/testDebugUnitTest/*.xml
                    enableTestSplitting: false
              - step:
                  type: GCSUpload
                  name: GCSUpload_1
                  identifier: GCSUpload_1
                  spec:
                    connectorRef: GCS_Connector
                    bucket: atmosly-tfstate-atmosly-439606
                    sourcePath: Calculator/app/build/outputs/apk/debug/*.apk
                    target: harness/test/<+pipeline.sequenceId>
          caching:
            enabled: true
            paths:
              - /harness/gradle/caches
              - /harness/gradle/wrapper
          buildIntelligence:
            enabled: true
        description: ""
    - stage:
        name: Distribute_Android
        identifier: Distribute_Android
        type: CI
        spec:
          cloneCodebase: false
          infrastructure:
            useFromStage: Build_Android
          execution:
            steps:
              - step:
                  type: Run
                  name: Download APK from GCS
                  identifier: Download_APK
                  spec:
                    image: google/cloud-sdk:slim
                    shell: Sh
                    command: |-
                      set -eux
                      # Write SA JSON to disk
                      echo '<+secrets.getValue("account.gcp_service_account_key")>' > /tmp/gcp.json
                      gcloud auth activate-service-account --key-file=/tmp/gcp.json
                      # (Optional) show who we are
                      gcloud auth list
                      # Download the APK produced by the CI stage into current dir
                      gsutil cp gs://atmosly-tfstate-atmosly-439606/harness/test/<+pipeline.sequenceId>/*.apk ./app-debug.apk
                      ls -lh ./app-debug.apk
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: Abort
              - step:
                  type: Run
                  name: Distribute to Firebase
                  identifier: Firebase_Distribute
                  spec:
                    image: node:18-alpine
                    shell: Sh
                    command: |-
                      set -eux
                      # Auth for Firebase via ADC (Application Default Credentials)
                      echo '<+secrets.getValue("FirebaseKey")>' > /tmp/firebase.json
                      export GOOGLE_APPLICATION_CREDENTIALS=/tmp/firebase.json

                      # Install CLI and distribute the downloaded APK
                      npm i -g firebase-tools
                      # Choose either groups or testers based on which secret you created
                      GROUPS='<+secrets.getValue("firebase_groups")>'
                      if [ -n "$GROUPS" ] && [ "$GROUPS" != "<+secrets.getValue(\"firebase_groups\")>" ]; then
                        firebase appdistribution:distribute ./app-debug.apk \
                          --app <+secrets.getValue("firebase_app_id")> \
                          --groups "$GROUPS" \
                          --release-notes "CI build <+pipeline.sequenceId> from <+codebase.branch>"
                      fi
        description: ""
